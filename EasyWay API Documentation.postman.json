{
	"info": {
		"_postman_id": "014cb12e-fe98-431f-b510-8a529a3f89b0",
		"name": "EasyWay API",
		"description": "The EasyWay's API is a JSON-based API that allows developers to access and interact with the web application's data and functionalities. All requests are made to endpoints beginning with \"[http://localhost:3000/api](http://localhost:3000/api)\" and \"[http://localhost:5000](http://localhost:5000/)\", and can be made using HTTP methods.\n\nBy using the EasyWay's API, developers can build custom integrations or third-party applications that can communicate with the web application's backend. This API documentation provides detailed information about the available endpoints, their input and output parameters, and the necessary authentication requirements to access them.\n\nWhether you are building a mobile application, integrating with a third-party service, or simply exploring the possibilities of the EasyWay's API, this documentation will guide you through the process and help you get started quickly and efficiently.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23815648",
		"_collection_link": "https://easywayapis.postman.co/workspace/Team-Workspace~8691dc6b-dbf2-45ad-8fd6-25229db4786f/collection/23815648-014cb12e-fe98-431f-b510-8a529a3f89b0?action=share&creator=23815648&source=collection_link"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Add user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alex\",\n    \"email\": \"alex@pace.edu\",\n    \"gender\": \"F\",\n    \"username\": \"alex\",\n    \"password\": \"alex1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user"
							]
						},
						"description": "The \"Add user\" API POST endpoint allows clients to create a new user in the system. The endpoint URL is \"[http://localhost:3000/api/user](http://localhost:3000/api/user)\". The request must contain a JSON object in the request body with the following attributes:\n\n- \"name\": The name of the user (string)\n- \"email\": The email of the user (string)\n- \"gender\": The gender of the user, either \"M\" (male) or \"F\" (female) (string)\n- \"username\": The username of the user (string)\n- \"password\": The password of the user (string)\n    \n\nIf the request is successful, the server will return a 201 CREATED status code along with a JSON object containing the newly created user's attributes, including an \"id\" attribute generated by the server."
					},
					"response": [
						{
							"name": "Add user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"alex\",\n    \"email\": \"alex@pace.edu\",\n    \"gender\": \"F\",\n    \"username\": \"alex\",\n    \"password\": \"alex1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"user"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept",
									"value": "application/x-www-form-urlencoded"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 22 Feb 2022 00:32:35 GMT"
								},
								{
									"key": "Content-Length",
									"value": "95"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"alex\",\n    \"username\": \"alex\",\n    \"password\": \"alex1\",\n    \"email\": \"alex@pace.edu\",\n    \"gender\": \"F\"\n}"
						}
					]
				},
				{
					"name": "Get user details",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/user/dummy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"dummy"
							]
						},
						"description": "The \"Get user details\" API GET endpoint allows clients to retrieve the details of a user from the system. The endpoint URL includes the user's unique identifier, for example \"[http://localhost:3000/api/user/1](http://localhost:3000/api/user/1)\" to retrieve the details of user with id 1.\n\nIn the example provided, the endpoint URL is \"[http://localhost:3000/api/user/dummy](http://localhost:3000/api/user/dummy)\" which suggests that there might be a user in the system with the username \"dummy\".\n\nIf the request is successful, the server will return a 200 OK status code along with a JSON object containing the requested user's attributes."
					},
					"response": [
						{
							"name": "Get user details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/user/dummy",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"user",
										"dummy"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 22 Feb 2022 00:33:36 GMT"
								},
								{
									"key": "Content-Length",
									"value": "104"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Dummy Duck\",\n    \"username\": \"dummy\",\n    \"password\": \"dumdum\",\n    \"email\": \"dummy@ufl.edu\",\n    \"gender\": \"M\"\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dummy@pace.edu\"\n}\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/forgotPassword",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"forgotPassword"
							]
						},
						"description": "This is a RESTful API for resetting a forgotten password in a web application. The API endpoint is located at [http://localhost:3000/api/forgotPassword](http://localhost:3000/api/forgotPassword) and accepts a POST request. The request body is expected to contain a JSON object with the email address of the user who forgot their password. The API response is a JSON object containing a message indicating that a temporary password has been sent to the email address provided.\n\nTo use this API, clients can make a POST request to the endpoint with the email address of the user who forgot their password included in the request body. The API will then generate a temporary password and send it to the email address provided. The client will receive a JSON response indicating that the temporary password has been sent to the email address.\n\nThis API can be used by web developers who want to provide their users with a way to reset their passwords if they forget them. It simplifies the process of resetting a password for the user and can help reduce the number of support requests related to password resets.\n\nIf the request is successful, the server will return a 200 OK status code along with a JSON object containing the requested user's attributes."
					},
					"response": [
						{
							"name": "Forgot Password",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dummy@pace.edu\"\n}\n"
								},
								"url": {
									"raw": "http://localhost:3000/api/forgotPassword",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"forgotPassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Fri, 28 Apr 2023 17:14:33 GMT"
								},
								{
									"key": "Content-Length",
									"value": "62"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"A temporary password has been sent to your email\"\n}"
						}
					]
				},
				{
					"name": "Forgot Username",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dummy@pace.edu\"     \n}\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/forgotUsername",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"forgotUsername"
							]
						},
						"description": "This is a RESTful API for resetting a forgotten username in a web application. The API endpoint is located at [http://localhost:3000/api/forgotUsername](http://localhost:3000/api/forgotUsername) and accepts a POST request. The request body is expected to contain a JSON object with the email address of the user who forgot their username. The API response is a JSON object containing a message indicating that a temporary username has been sent to the email address provided.\n\nTo use this API, clients can make a POST request to the endpoint with the email address of the user who forgot their username included in the request body. The API will then generate a temporary username and send it to the email address provided. The client will receive a JSON response indicating that the temporary username has been sent to the email address.\n\nThis API can be used by web developers who want to provide their users with a way to reset their usernames if they forget them. It simplifies the process of resetting a username for the user and can help reduce the number of support requests related to username resets.\n\nIf the request is successful, the server will return a 200 OK status code along with a JSON object containing the requested user's attributes."
					},
					"response": [
						{
							"name": "Forgot Username",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dummy@pace.edu\"     \n}\n"
								},
								"url": {
									"raw": "http://localhost:3000/api/forgotUsername",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"forgotUsername"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Fri, 28 Apr 2023 17:14:38 GMT"
								},
								{
									"key": "Content-Length",
									"value": "62"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"A temporary username has been sent to your email\"\n}"
						}
					]
				}
			],
			"description": "The User contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there are several endpoint descriptions for user-related actions.\n\nThe \"**POST** Add User\" endpoint allows a user to be created with the specified details.\n\nThe \"**GET** Get User Details\" endpoint retrieves the details of a specific user, based on their unique identifier.\n\nThe \"**POST** Forgot Password\" endpoint initiates the process for a user to reset their forgotten password.\n\nThe \"**POST** Forgot Username\" endpoint initiates the process for a user to retrieve their forgotten username.\n\nEach endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage."
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "Get all services",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"services"
							]
						},
						"description": "The \"Get all services\" API GET endpoint allows clients to retrieve a list of all services from the system. The endpoint URL is \"[http://localhost:3000/api/services](http://localhost:3000/api/services)\".\n\nIf the request is successful, the server will return a 200 OK status code along with a JSON object containing an array of service objects. Each service object in the array will contain the attributes of the service, such as service id, name, description, and cost."
					},
					"response": [
						{
							"name": "Get all services",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/services",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"services"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 22 Feb 2022 00:34:25 GMT"
								},
								{
									"key": "Content-Length",
									"value": "639"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"AC Maintanence\",\n        \"description\": \"Any type of AC maintanence such as filter cleaning, part replacement, etc.\",\n        \"username\": \"Electronics\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Plumbing\",\n        \"description\": \"Sanitary and household plumbing. No sewage service.\",\n        \"username\": \"Household\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Saloon\",\n        \"description\": \"Haricut, massage, nailwork, makeup, etc.\",\n        \"username\": \"Personal Care\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Furniture Repair\",\n        \"description\": \"Furniture frame repair, drilling, fitting new furniture, etc.\",\n        \"username\": \"Household\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Exterminator\",\n        \"description\": \"Pest control, wildlife evac, alligator emergency, etc.\",\n        \"username\": \"Animal/Pet\"\n    }\n]"
						}
					]
				},
				{
					"name": "Search Services",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\" : \"Plumber\"\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/services/search?name=plum",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"services",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "plum"
								}
							]
						},
						"description": "This API allows users to search for services based on a query parameter 'name'. The endpoint URL is [http://localhost:3000/api/services/search?name=plum](http://localhost:3000/api/services/search?name=plum), and the HTTP method is GET. The query parameter 'name' is required and should be specified in the URL as `name=`. A request body is optional, and can be sent as JSON in the raw text format.\n\nAn example request is provided in cURL format, with the query parameter 'name' set to 'plum' and a request body specifying a search query for 'Plumber'. The response is returned as a JSON array of services matching the search query, each service represented as an object with the following properties: 'id', 'name', 'description', 'category', 'image_name', and 'price'."
					},
					"response": [
						{
							"name": "Search Services",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\" : \"Plumber\"\n}   ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/services/search?name=plum",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"services",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "plum"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, PUT, DELETE, OPTIONS"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Sat, 29 Apr 2023 19:08:07 GMT"
								},
								{
									"key": "Content-Length",
									"value": "160"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"Plumbing\",\n        \"description\": \"Sanitary and household plumbing. No sewage service.\",\n        \"category\": \"Household\",\n        \"image_name\": \"plumbing.jpg\",\n        \"price\": 100\n    }\n]"
						}
					]
				}
			],
			"description": "The Service contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there are several endpoint descriptions for service-related actions.\n\nThe \"**GET** Get all services\" endpoint retrieves a list of all available services within the system.\n\nThe \"**GET** Search Services\" endpoint allows users to search for services based on certain criteria, such as keywords or specific parameters.\n\nEach endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage. The documentation should also include any relevant examples or code snippets to assist developers in using the API."
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Get bookings from a given user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"3"
							]
						},
						"description": "The \"Get bookings from a given user\" API GET endpoint allows clients to retrieve a list of all bookings associated with a particular user. The endpoint URL includes the user's unique identifier, for example \"[http://localhost:3000/api/bookings/3](http://localhost:3000/api/bookings/3) retrieve the bookings of user with id 3.\n\nIf the request is successful, the server will return a 200 OK status code along with a JSON object containing an array of booking objects. Each booking object in the array will contain the attributes of the booking, such as booking id, user id, service id, date, start time, and end time."
					},
					"response": [
						{
							"name": "Get bookings from a given user",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/bookings/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"bookings",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 22 Feb 2022 00:36:10 GMT"
								},
								{
									"key": "Content-Length",
									"value": "135"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"user_id\": 0,\n    \"service_id\": 3,\n    \"date\": \"2022-02-15T16:30:00Z\",\n    \"start_time\": \"2022-02-15T16:30:00Z\",\n    \"end_time\": \"2022-02-15T17:30:00Z\"\n}"
						}
					]
				},
				{
					"name": "Book a service",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5,\n    \"user_id\": 3,\n    \"service_id\": 4,\n    \"date\": \"2022-02-15\",\n    \"start_time\": \"12:30\",\n    \"end_time\": \"13:30\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/bookService",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookService"
							]
						},
						"description": "The \"Book a service\" API POST endpoint allows clients to book a service by creating a new booking. Clients can send a cURL POST request to the endpoint \"[http://localhost:3000/api/bookService](http://localhost:3000/api/bookService)\" to create a new booking.\n\nThe request body must include a JSON object that contains the following attributes:\n\n- id: the unique identifier for the booking\n- user_id: the unique identifier for the user who is making the booking\n- service_id: the unique identifier for the service being booked\n- date: the date of the booking, in YYYY-MM-DD format\n- start_time: the start time of the booking, in HH:MM format\n- end_time: the end time of the booking, in HH:MM format\n    \n\nIf the request is successful, the server will return a 201 CREATED status code along with a JSON object containing the attributes of the new booking.\n\nIf there is an error in creating the new booking, the server will return an appropriate error response."
					},
					"response": [
						{
							"name": "Book a service",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 2,\n    \"user_id\": 1,\n    \"service_id\": 3,\n    \"date\": \"2022-02-15\",\n    \"start_date\": \"11:30\",\n    \"end_date\": \"13:30\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/bookService",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"bookService"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept",
									"value": "application/x-www-form-urlencoded"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 05:02:08 GMT"
								},
								{
									"key": "Content-Length",
									"value": "65"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Error 1062: Duplicate entry '2' for key 'bookings.id'\"\n}"
						},
						{
							"name": "Book a service",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 4,\n    \"user_id\": 1,\n    \"service_id\": 4,\n    \"date\": \"2022-02-15\",\n    \"start_time\": \"11:30\",\n    \"end_time\": \"13:30\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/bookService",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"bookService"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept",
									"value": "application/x-www-form-urlencoded"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 06:01:06 GMT"
								},
								{
									"key": "Content-Length",
									"value": "232"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"user_id\": 1,\n    \"service_id\": 4,\n    \"date\": \"2022-02-15\",\n    \"start_time\": \"11:30\",\n    \"end_time\": \"13:30\",\n    \"User\": {\n        \"id\": 0,\n        \"name\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\"\n    },\n    \"Service\": {\n        \"id\": 0,\n        \"name\": \"\",\n        \"description\": \"\",\n        \"username\": \"\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Booking",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"user_id\": 1,\n    \"service_id\": 1,\n    \"date\": \"2023-06-15\",\n    \"start_time\": \"12:00\",\n    \"end_time\": \"13:00\",\n    \"note\": \"Updated booking note\"\n}\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/updateBooking",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"updateBooking"
							]
						},
						"description": "This API is a PUT endpoint that updates an existing booking based on its ID. The endpoint is located at [http://localhost:3000/updateBooking](http://localhost:3000/updateBooking) and expects a query parameter \"id\" that represents the ID of the booking to be updated.\n\nThe request body contains a JSON object that represents the updated booking details. The example shows an updated booking with an ID of 1, userId of 1, serviceId of 1, and a new date, start time, and end time for the booking. Additionally, there is a boolean flag \"isCancelled\" to indicate if the booking has been cancelled.\n\nThe API will update the booking details based on the ID provided in the query parameter and the new booking details provided in the request body. The response of the API will indicate the success or failure of the update operation.\n\nThis API is useful in various applications that require updating existing bookings, such as booking systems for hotels, restaurants, or other service-based businesses."
					},
					"response": [
						{
							"name": "Update Booking",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Id\": 1,\n    \"UserId\": 1,\n    \"ServiceId\": 1,\n    \"Date\": \"2023-06-15\",\n    \"StartTime\": \"12:00\",\n    \"EndTime\": \"13:00\",\n    \"Note\": \"Updated booking note\"\n}\n"
								},
								"url": {
									"raw": "http://localhost:3000/api/updateBooking",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"updateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "PUT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "http://localhost:4200"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Sat, 06 May 2023 05:05:04 GMT"
								},
								{
									"key": "Content-Length",
									"value": "136"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"user_id\": 1,\n    \"service_id\": 0,\n    \"date\": \"2023-06-15\",\n    \"start_time\": \"\",\n    \"end_time\": \"\",\n    \"is_cancelled\": false,\n    \"note\": \"Updated booking note\"\n}"
						}
					]
				}
			],
			"description": "The Booking contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there are several endpoint descriptions for booking-related actions.\n\nThe \"**GET** Get Bookings from a given user\" endpoint retrieves a list of all bookings made by a specific user, based on their unique identifier.\n\nThe \"**POST** Book a Service\" endpoint allows users to create a new booking for a particular service, providing the necessary details and parameters.\n\nThe \"**PUT** Update Booking\" endpoint allows users to update an existing booking, based on its unique identifier. This may include changes to the date, time, or service details.\n\nEach endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage. The documentation should also include any relevant examples or code snippets to assist developers in using the API."
		},
		{
			"name": "Blog",
			"item": [
				{
					"name": "Get All Blogs",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/getAllBlogs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"getAllBlogs"
							]
						},
						"description": "This is a RESTful API that retrieves all the blogs in a web application. The API endpoint is located at [http://localhost:3000/api/getAllBlogs](http://localhost:3000/api/getAllBlogs) and accepts a GET request. The request body is empty, and the API response is a JSON object containing an array of all the blogs in the web application.\n\nTo use this API, clients can make a GET request to the endpoint with no request body. The API will then retrieve all the blogs in the web application and return them in a JSON array. Each blog in the array contains an id, a title, content, created_at and updated_at timestamp, and an optional image_name attribute.\n\nThis API can be used by web developers who want to display all the blogs in their web application to users. It simplifies the process of retrieving all the blogs in the web application and makes it easier for clients to integrate the blogs into their website or application."
					},
					"response": [
						{
							"name": "Get All Blogs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/getAllBlogs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"getAllBlogs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Sat, 29 Apr 2023 19:06:12 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1762"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"Why On-Demand Services are the Future of Convenience\",\n        \"content\": \"On-demand services have become a popular trend in recent years due to their convenience and accessibility. With the rise of smartphones and apps, people are able to order almost anything they need at the touch of a button. From food delivery to ride-sharing to home cleaning services, on-demand services offer a wide range of options for consumers. They eliminate the need for physical stores and the inconvenience of waiting in long lines or driving to multiple locations. With the COVID-19 pandemic accelerating the shift towards online and contactless services, on-demand services have become even more crucial for people looking to get what they need quickly and safely.\",\n        \"created_at\": \"2023-04-25 07:30\",\n        \"updated_at\": \"2023-04-25 07:32\",\n        \"image_name\": \"house_cleaning.jpg\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"The Pros and Cons of On-Demand Home Cleaning Services\",\n        \"content\": \"On-demand home cleaning services have become a popular choice for busy people looking to outsource their household chores. These services offer the convenience of scheduling and paying for cleaning online, without the need for face-to-face communication with the cleaners. However, there are some drawbacks to these services. One of the main concerns is the quality of the cleaning. With on-demand services, the cleaners may not be as thorough as you would like, and there may be a lack of consistency between different cleaners. Additionally, on-demand cleaning services can be more expensive than hiring a regular cleaner or cleaning yourself. They often charge a premium for the convenience and flexibility they offer.\",\n        \"created_at\": \"2023-04-25 09:15\",\n        \"updated_at\": \"2023-04-25 09:30\",\n        \"image_name\": \"refridgerator.jpg\"\n    }\n]"
						}
					]
				}
			],
			"description": "The Blog contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there is a single endpoint description for retrieving all blogs.\n\nThe \"**GET** Get All Blogs\" endpoint retrieves a list of all blog posts available within the system. This endpoint may include parameters to filter the results based on certain criteria, such as author or category.\n\nThe endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage. The documentation should also include any relevant examples or code snippets to assist developers in using the API."
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Get All Comments of a Blog",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/getAllComments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"getAllComments",
								"1"
							]
						},
						"description": "This is a RESTful API that retrieves comments associated with a particular blog post. The API endpoint is located at [http://localhost:3000/api/getAllComments/1](http://localhost:3000/api/getAllComments/1), it likely accepts a GET request with a blog_id parameter that identifies the blog post to retrieve comments for.\n\nThe API response is a JSON array containing one or more comment objects. Each comment object contains an id that uniquely identifies the comment, a blog_id that indicates the blog post the comment is associated with, a content field that contains the text of the comment, and created_at and updated_at fields that indicate when the comment was created and last updated, respectively.\n\nThis API can be used by web developers who want to display comments associated with a particular blog post to users. By providing an API endpoint to retrieve comments, developers can simplify the process of retrieving and displaying comments and can integrate the comments into their website or application."
					},
					"response": [
						{
							"name": "Get All Comments of a Blog",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/api/getAllComments/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"getAllComments",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Sat, 29 Apr 2023 19:07:18 GMT"
								},
								{
									"key": "Content-Length",
									"value": "533"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"blog_id\": 1,\n        \"content\": \"Great article, very informative!\",\n        \"created_at\": \"2023-04-25 09:30\",\n        \"updated_at\": \"2023-04-25 09:30\"\n    },\n    {\n        \"id\": 2,\n        \"blog_id\": 1,\n        \"content\": \"I totally agree, on-demand services are the way to go!\",\n        \"created_at\": \"2023-04-25 10:15\",\n        \"updated_at\": \"2023-04-25 10:15\"\n    },\n    {\n        \"id\": 4,\n        \"blog_id\": 1,\n        \"content\": \"This is a new comment\",\n        \"created_at\": \"2023-04-29 14:47:28\",\n        \"updated_at\": \"2023-04-29 14:47:28\"\n    },\n    {\n        \"id\": 5,\n        \"blog_id\": 1,\n        \"content\": \"This is a new comment\",\n        \"created_at\": \"2023-04-29 14:50:19\",\n        \"updated_at\": \"2023-04-29 14:50:19\"\n    }\n]"
						}
					]
				},
				{
					"name": "Add Comment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"blog_id\": 0,\n    \"content\": \"This is a new comment\"\n}\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/blogs/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"1",
								"comments"
							]
						},
						"description": "This is a RESTful API that allows users to add a comment to a particular blog post. The API endpoint is provided as [http://localhost:3000/api/blogs/1/comments](http://localhost:3000/api/blogs/1/comments), where 1 is the blog_id of the blog post that the comment should be associated with.\n\nThe API request requires a POST method, and the request body is expected to be a JSON object containing a blog_id field that indicates the ID of the blog post that the comment should be associated with, and a content field that contains the text of the comment.\n\nThe API response is not shown in the example, but it would typically include a status code indicating whether the comment was successfully added or not.\n\nThis API can be used by web developers who want to allow users to add comments to their blog posts. By providing an API endpoint to add comments, developers can simplify the process of adding comments and can integrate the comments into their website or application."
					},
					"response": [
						{
							"name": "Add Comment",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blog_id\": 0,\n    \"content\": \"This is a new comment\"\n}\n"
								},
								"url": {
									"raw": "http://localhost:3000/api/blogs/1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs",
										"1",
										"comments"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST, OPTIONS"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Fri, 28 Apr 2023 03:26:20 GMT"
								},
								{
									"key": "Content-Length",
									"value": "124"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"blog_id\": 1,\n    \"content\": \"This is a new comment\",\n    \"created_at\": \"2023-04-27 23:26:20\",\n    \"updated_at\": \"2023-04-27 23:26:20\"\n}"
						}
					]
				}
			],
			"description": "The Comment contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there are several endpoint descriptions for blog and comment-related actions.\n\nThe \"**GET** Get All Comments of a Blog\" endpoint retrieves a list of all comments associated with a specific blog post, based on its unique identifier.\n\nThe \"**POST** Add Comment\" endpoint allows users to create a new comment for a particular blog post, providing the necessary details and parameters.\n\nEach endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage. The documentation should also include any relevant examples or code snippets to assist developers in using the API."
		},
		{
			"name": "Detection",
			"item": [
				{
					"name": "Detections",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images",
									"type": "file",
									"src": "1RILOqThE/dog.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3600/detections",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3600",
							"path": [
								"detections"
							]
						},
						"description": "This API is a POST endpoint that receives image files and returns a JSON response containing object detection results. The endpoint is located at [http://localhost:3600/detections](http://localhost:3600/detections).\n\nThe request body format is form-data and contains a single field named \"images\" which represents the image file being uploaded. The example shows an image file named \"dog.jpg\" with a unique identifier of \"1RILOqThE\".\n\nThe expected response format is a JSON object with a \"response\" field that contains an array of objects. Each object in the array represents a single image and contains a \"detections\" field which is an array of detected objects with their respective confidence scores. Additionally, each object contains an \"image\" field which represents the name of the image file.\n\nThis API uses a deep learning-based object detection algorithm to detect objects in the uploaded image. It can detect multiple objects and their respective confidence scores. The API is useful in various applications that require object detection, such as security surveillance, image tagging, and autonomous vehicles."
					},
					"response": [
						{
							"name": "Detections",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "images",
											"type": "file",
											"src": "vhA4Rnc7E/dog.jpg"
										}
									]
								},
								"url": {
									"raw": "http://localhost:3600/detections",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3600",
									"path": [
										"detections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/2.3.2 Python/3.10.3"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 04:31:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "328"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": [\n        {\n            \"detections\": [\n                {\n                    \"class\": \"dog\",\n                    \"confidence\": 99.77\n                },\n                {\n                    \"class\": \"bicycle\",\n                    \"confidence\": 99.02\n                },\n                {\n                    \"class\": \"truck\",\n                    \"confidence\": 93.78\n                }\n            ],\n            \"image\": \"dog.jpg\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Detections",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://localhost:3000/api/detection?folderName=detections",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"detection"
							],
							"query": [
								{
									"key": "folderName",
									"value": "detections"
								}
							]
						},
						"description": "This API is a GET endpoint that retrieves a list of detections from a specified folder. The endpoint is located at [http://localhost:3000/api/detection](http://localhost:3000/api/detection) and expects a query parameter \"folderName\" that represents the name of the folder where the detections are stored.\n\nThe example shows a request being made to retrieve detections from a folder named \"detections\". The response from the API will be a list of detections in the specified folder.\n\nThis API is useful in various applications that require accessing object detection results, such as image analysis and object tracking systems. By retrieving the detection results, further analysis and processing can be performed on the detected objects."
					},
					"response": [
						{
							"name": "Get Detections",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:3000/api/detection?folderName=detections",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"detection"
									],
									"query": [
										{
											"key": "folderName",
											"value": "detections"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "The Detection contains the API documentation for a web application. It includes descriptions of the available endpoints, their inputs and outputs, and any relevant information about authentication, errors, and usage guidelines.\n\nWithin this, there are endpoint descriptions for language detection-related actions.\n\nThe \"**POST** Detections\" endpoint allows users to input text and detect the language it is written in. This endpoint will return the detected language code.\n\nThe \"**GET** Get Detections\" endpoint retrieves a list of all the language detection results made by the user for a specific session, identified by a unique identifier.\n\nEach endpoint should have its own separate documentation file, outlining the specific parameters, responses, and any additional information required for usage. The documentation should also include any relevant examples or code snippets to assist developers in using the API."
		}
	]
}